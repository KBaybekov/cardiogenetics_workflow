all:
  trim_galore:['{} --length 35 --output_dir {} --cores {} --paired {}',
                        [binaries['trim_galore'], tmp_dir, threads, ' '.join(raw_fastqs)]],
        
  'trimmomatic':['java -jar {} PE -threads {} {} -baseout {}{}.fq SLIDINGWINDOW:4:20 HEADCROP:15 MINLEN:35',
                            [binaries['trimmomatic'], threads, ' '.join(trim_galore_fastqs), tmp_dir, basename]],
        
  'fastqc':['{} --quiet --threads 2 -o {} {}{}*P.fq',
                    [binaries['fastqc'], qc_dir, tmp_dir, basename]],
        
  'aligning':['bwa mem -t {} -M {} {} | {} -M -e -r -q --addMateTags | {} view -@ {} -Sb - > {}primary.bam',
                [threads, ref, trimmomatic_fastqs, binaries['samblaster'], binaries['samtools'], threads, tmp_dir]],
        
  'samtools_sort':['{} sort -@ {} {} > {}',
                            [binaries['samtools'], threads, in_bam, sorted_bam]],
        
  'samtools_index':['{} index {}',
                            [binaries['samtools'], sorted_bam]],
  'abra2_localization'      #export LC_ALL=en_US.UTF-8
  'abra2':['java {} --log error --in {} --out {} --ref {} --threads {} --tmpdir {}',
                    [binaries['abra2'], sorted_bam, abra_bam, ref, threads, tmp_dir]],

  'samtools_index_abra':['{} index {}',
                            [binaries['samtools'], abra_bam]],

#            'freebayes':['{} -f {} --standard-filters --report-genotype-likelihood-max --min-coverage 18 --min-alternate-qsum 50 --min-alternate-count 5 --min-alternate-fraction 0.2 {} > {}',
#                            [binaries['freebayes'], ref, abra_bam, vcf_freebayes]],

  'freebayes':['{} -f {} --standard-filters --report-genotype-likelihood-max --min-coverage 10 --min-alternate-qsum 50 --min-alternate-count 5 --min-alternate-fraction 0.2 {} > {}',
                        [binaries['freebayes'], ref, abra_bam, vcf_freebayes]],

  'deepvariant':['sudo docker run -v {}:/input -v {}:/output -v {}:/ref/ -v {}:/tmp/ google/deepvariant /opt/deepvariant/bin/run_deepvariant --model_type={} --ref=/ref/{} --reads=/input/{} --output_vcf=/output/{} --output_gvcf=/output/{} --intermediate_results_dir /tmp/intermediate_results_dir --num_shards={}',
                        [bam_dir, vcf_dir, os.path.dirname(ref), tmp_dir, seq_mode, os.path.basename(ref), abra_bam.split('/')[-1], vcf_deepvariant, gvcf_deepvariant, threads]],

  'annovar_freebayes':['{}table_annovar.pl -thread {} -vcfinput {} {}humandb/ -buildver hg38 -out {}_freebayes -protocol gnomad41_exome,gnomad41_genome -operation f,f -nastring . -polish',
                    [annovar_dir, threads, vcf_freebayes, annovar_dir, annovar_vcf_mask]],

  'cravat_freebayes':['{} run {}_freebayes.hg38_multianno.vcf -l hg38 -t excel -a {} -d {} --mp {} -n {}_cravat_freebayes',
                  [binaries['cravat'], annovar_vcf_mask, cravat_annotators, annotation_dir, threads, basename]],

  'annovar_deepvariant':['{}table_annovar.pl -thread {} -vcfinput {} {}humandb/ -buildver hg38 -out {}_deepvariant -protocol gnomad41_exome,gnomad41_genome -operation f,f -nastring . -polish',
                    [annovar_dir, threads, vcf_deepvariant, annovar_dir, annovar_vcf_mask]],
        
        'cravat_deepvariant':['{} run {}_deepvariant.hg38_multianno.vcf -l hg38 -t excel -a {} -d {} --mp {} -n {}_cravat_deepvariant',
                  [binaries['cravat'], annovar_vcf_mask, cravat_annotators, annotation_dir, threads, basename]],

  'remove_tmp_files':['rm {}{}*',
                            [tmp_dir, basename]],
        }