align:
  folders:
    input_dir:
    output_dir:
      log_dir:
        Log
      tmp_dir:
        tmp
      qc_dir:
        QC
      fastqc_dir:
        QC/fastQC
      qualimap_dir:
        QC/qualimap
      bam_dir:
        bam
  
  source_extensions:
    ['_R1.fastq.gz', '_R1.fq.gz']

  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    raw_fastqs: |
      [sample, sample.replace('_R1', '_R2')]
    trim_galore_fastqs: |
      [s.replace(folders['input'], folders['tmp_dir']).replace('.fastq.gz', f"_val_{(filenames['raw_fastqs'].index(s)+1)}.fq.gz") for s in filenames['raw_fastqs']]
    trimmomatic_fastqs: |
      ' '.join([f"{folders['tmp_dir']}{filenames['basename']}_{i}P.fq" for i in [1,2]])
    abra_bam: |
      f"{folders['bam_dir']}{filenames['basename']}_abra2.bam"
    in_bam: |
      f"{folders['tmp_dir']}primary.bam"
    sorted_bam: |
      f"{folders['tmp_dir']}sorted.bam"

  commands:
    before_batch:
      - qualimap_headless_var
      - abra2_lc_var
    sample_level:
      - trim_galore
      - trimmomatic
      - aligning
      - samtools_sort
      - samtools_index
      - abra2
      - samtools_index_abra
      - qualimap
      - remove_tmp_files
    after_batch:
      - fastqc_raw
      - multiqc
      - remove_tmp_folder


variant_calling:
  folders:
    input_dir:
    output_dir:
      log_dir:
        Log
      tmp_dir:
        tmp
      vcf_dir:
        vcf
  
  source_extensions:
    ['.bam']
  
  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    abra_bam: |
      f"{folders['bam_dir']}{filenames['basename']}_abra2.bam"
    vcf: |
      f"{folders['vcf_dir']}{filenames['basename']}.vcf.gz"
    unzipped_vcf: |
      filenames['vcf'].removesuffix('.gz')
    vcf_freebayes: |
      filenames['vcf'].replace('.vcf', '_freebayes.vcf')
    vcf_deepvariant: |
      filenames['vcf'].replace('.vcf', '_deepvariant.vcf.gz')
    gvcf_deepvariant: |
      filenames['vcf_deepvariant'].replace('vcf','gvcf')}

  commands:
    before_batch:
    sample_level:
      - freebayes
      - deepvariant
      - fb_vcf_filtering
      - fb_bgzip
      - dv_vcf_filtering
      - dv_bgzip
      - vcf_intersection
      - merged_vcf_actions
      - remove_tmp_files
    after_batch:

annotation:
  folders:
    input_dir:
    output_dir:
      log_dir:
        Log
      tmp_dir:
        tmp
      ann_dir:
        annotation
  
  source_extensions:
    ['.vcf.gz']
  
  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    vcf: |
      f"{folders['vcf_dir']}{filenames['basename']}.vcf.gz"
    cravat: |
      f"{folders['ann_dir']}{filenames['basename']}"
  
  commands:
    before_batch:
    sample_level:
      - cravat
    after_batch:


excel_postprocessing:
  folders:
    input_dir:
    output_dir:
      log_dir:
        Log
      tmp_dir:
        tmp
      excel_dir:
        excel
  
  source_extensions:
    ['.tsv']

  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    cravat_tsv: |
      f"{folders['ann_dir']}{filenames['basename']}_cravat"
    excel: |
      f"{folders['ann_dir']}{filenames['basename']}_cravat"
  
  commands:
    before_batch:
    sample_level:
      - excel_postprocessing
    after_batch: